const
    { parse } = require("node-html-parser"),
    {
        userag,
        functFormat,
        getIsCommented,
        getData
    } = require("./lib/utils"),
    baseDomain = `https://anime-sama.fr`;

const getBase = (ip) => {
    return new Promise(async (resolve, reject) => {
        getData(baseDomain, ip).then(data => {
            const
                dom = parse(data),
                scripts = dom.getElementsByTagName("script");
            let all = [];
            for (let i = 0; i < scripts.length; i++) {
                var
                    script = scripts[i].innerHTML,
                    alls = script.match(/"([^"]*)"/g);
                if (alls) {
                    alls.forEach(a => script = script.replace(a, a.replace(",", ".").replace("(", "[").replace(")", "]")));
                    const add = (calls) => {
                        let alls = [];
                        for (let j = 0; j < calls.length; j++) {
                            const isCom = getIsCommented(script, calls[j]);
                            if (!isCom) {
                                const
                                    isAnime = calls[j].match(/cartePlanningAnime\(.*?\)/g) ? true : false,
                                    params = calls[j].match(/\((.*)\)/)[1],
                                    paramsArray = params.split(',');
                                if (functFormat(paramsArray[0]) == "nom") return;
                                alls.push({
                                    name: functFormat(paramsArray[0]),
                                    url: `/watch/${functFormat(paramsArray[1])}`,
                                    img: functFormat(paramsArray[2]),
                                    heure: functFormat(paramsArray[3]),
                                    problm: functFormat(paramsArray[4]),
                                    lang: functFormat(paramsArray[5]),
                                    type: isAnime ? "anime" : "scan"
                                })
                            }
                        };
                        alls.sort(function (a, b) {
                            var aHeure = parseInt(a?.heure?.split("h")[0]);
                            var bHeure = parseInt(b?.heure?.split("h")[0]);
                            return aHeure - bHeure;
                        });
                        all.push(alls)
                    };
                    var
                        callsA = script.match(/cartePlanningAnime\(.*?\)/g),
                        callsS = script.match(/cartePlanningScan\(.*?\)/g);
                    if (callsS && !callsA) callsA = [];
                    if (callsS) callsA.push(...callsS);
                    if (callsA) add(callsA);
                }
            };
            const day = {
                lundi: all[0],
                mardi: all[1],
                mercredi: all[2],
                jeudi: all[3],
                vendredi: all[4],
                samedi: all[5],
                dimanche: all[6]
            };
            const allDiv = dom.querySelectorAll(".scrollBarStyled");
            let alla = [];
            allDiv.forEach(e => {
                const a = e.querySelectorAll(".shrink-0");
                let allaa = [];
                if (a?.length != 0) {
                    a.forEach(r => {
                        const
                            link = r.getElementsByTagName("a")[0],
                            img = link.getElementsByTagName("img")[0],
                            text = link.getElementsByTagName("div")[0],
                            h1 = text.getElementsByTagName("h1")[0],
                            p = text.getElementsByTagName("p")[0];
                        allaa.push({
                            url: link?.getAttribute("href").replace("https://anime-sama.fr", "").replace("/catalogue/", "/anime/"),
                            img: img?.getAttribute("src"),
                            titre: h1?.innerText,
                            titre2: p?.innerText,
                            // genres: allg
                        })
                    });
                    alla.push(allaa)
                }
            });
            const animes = {
                recent: alla[0],
                classiques: alla[1],
                pepites: alla[2]
            };
            resolve({
                calendrier: day,
                animes: animes
            });
        }).catch(err => {
            reject(err);
        });
    })
};
exports.getBase = getBase;

// const getAllCatalog = (ip) => {
//     return new Promise(async (resolve, reject) => {
//         fetch(`${baseDomain}/listing_all.php`, {
//             method: "post",
//             body: `query=1`,
//             headers: {
//                 'user-agent': userag(ip),
//                 'accept': 'application/json, text/plain, */*',
//                 'Content-Type': "application/x-www-form-urlencoded"
//             }
//         }).then(res => {
//             res.text().then(data => {
//                 console.log(data);
//                 const
//                     dom = parse(data),
//                     a = dom.querySelectorAll("a");
//                 let all = [];
//                 a.forEach(e => {
//                     const
//                         img = e.getElementsByTagName("img")[0],
//                         h3 = e.getElementsByTagName("h3")[0],
//                         p = e.getElementsByTagName("p")[0];
//                     all.push({
//                         url: e.getAttribute("href").replace("https://anime-sama.fr", "").replace("/catalogue/", "/anime/"),
//                         img: img.getAttribute("src"),
//                         titre: h3?.innerText,
//                         titre2: p?.innerText,
//                     })
//                 });
//                 resolve(all);
//             })
//         }).catch(err => {
//             reject(err);
//         });
//     })
// };
// exports.getAllCatalog = getAllCatalog;

const getCatalog = (page, ip) => {
    if (!page || page == 1 || page == 0) page = ""
    else page = `index.php?page=${page}`;
    return new Promise(async (resolve, reject) => {
        getData(`${baseDomain}/catalogue/${page}`, ip).then(async data => {
            const
                dom = parse(data),
                allcard = dom.querySelectorAll(".cardListAnime"),
                allcard2 = dom.querySelector("#nav_pages .flex"),
                alla = allcard2.querySelectorAll("a");
            let allaa = [];
            allcard.forEach(e => {
                const a = e.querySelector(".shrink-0");
                if (a) {
                    const
                        link = a.getElementsByTagName("a")[0],
                        img = link.getElementsByTagName("img")[0],
                        text = link.getElementsByTagName("div")[0],
                        h1 = text.getElementsByTagName("h1")[0],
                        p = text.getElementsByTagName("p")[0];
                    allaa.push({
                        url: link?.getAttribute("href").replace("https://anime-sama.fr", "").replace("/catalogue/", "/anime/"),
                        img: img?.getAttribute("src"),
                        titre: h1?.innerText,
                        titre2: p?.innerText,
                    })
                }
            });
            resolve({
                max: alla[alla.length - 1]?.innerHTML,
                data: allaa
            });
        }).catch(err => {
            reject(err);
        })
    })
};
exports.getCatalog = getCatalog;

const search = (name, ip) => {
    return new Promise(async (resolve, reject) => {
        fetch(`${baseDomain}/template-php/defaut/fetch.php`, {
            method: "post",
            body: `query=${name}`,
            headers: {
                'user-agent': userag(ip),
                'accept': 'application/json, text/plain, */*',
                'Content-Type': "application/x-www-form-urlencoded"
            }
        }).then(res => {
            res.text().then(data => {
                const
                    dom = parse(data),
                    a = dom.querySelectorAll("a");
                let all = [];
                a.forEach(e => {
                    const
                        img = e.getElementsByTagName("img")[0],
                        h3 = e.getElementsByTagName("h3")[0],
                        p = e.getElementsByTagName("p")[0];
                    all.push({
                        url: e.getAttribute("href").replace("https://anime-sama.fr", "").replace("/catalogue/", "/anime/"),
                        img: img.getAttribute("src"),
                        titre: h3?.innerText,
                        titre2: p?.innerText,
                    })
                });
                resolve(all);
            })
        }).catch(err => {
            reject(err);
        });
    })

};
exports.search = search;

const info = (name, ip) => {
    if (!name) return;
    const url = `/catalogue/${name}`;
    // url = url.replace("https://anime-sama.fr", "");
    return new Promise(async (resolve, reject) => {
        getData(`${baseDomain}${url}`, ip).then(data => {
            const
                dom = parse(data),
                titreOeuvre = dom.querySelector("#titreOeuvre"),
                titreAlter = dom.querySelector("#titreAlter"),
                allAP = dom.querySelectorAll(".mt-2"),
                img = dom.querySelector("#coverOeuvre"),
                scripts = dom.getElementsByTagName("script");

            let all = [];
            for (let i = 0; i < scripts.length; i++) {
                var
                    script = scripts[i].innerHTML,
                    alls = script.match(/"([^"]*)"/g);
                if (alls) {
                    alls.forEach(a => script = script.replace(a, a.replace(",", ".").replace("(", "[").replace(")", "]")));
                    const add = (calls) => {
                        let alls = [];
                        for (let j = 0; j < calls.length; j++) {
                            const isCom = getIsCommented(script, calls[j]);
                            if (!isCom) {
                                const
                                    params = calls[j].match(/\((.*)\)/)[1],
                                    paramsArray = params.split(',');
                                if (functFormat(paramsArray[0]) == "nom") return;
                                const special = (n) => {
                                    n = n.trim();
                                    let s = false;
                                    if (n.startsWith("Kai ")) s = "Kai";
                                    return s
                                };
                                alls.push({
                                    isanime: calls[j].startsWith("panneauScan") ? false : true,
                                    special: special(functFormat(paramsArray[0])),
                                    name: functFormat(paramsArray[0]),
                                    url: `/watch/${name}/${functFormat(paramsArray[1])}`
                                })
                            }
                        };
                        all.push(...alls)
                    };
                    var
                        callsA = script.match(/panneauAnime\(.*?\)/g),
                        callsS = script.match(/panneauScan\(.*?\)/g);
                    if (callsS && !callsA) callsA = [];
                    if (callsS) callsA.push(...callsS);
                    if (callsA) add(callsA);

                }
            };

            const alldata = allAP.filter(e => e.getAttribute("class").includes("mt-2") && e.rawTagName == "a" || e.rawTagName == "p").map(e => e.innerText);
            const sai = {
                anime: all.filter(e => e.isanime && !e.special),
                manga: all.filter(e => !e.isanime)
            };
            const sp = all.filter(e => e.special);
            if (sp) sai.special = sp;

            const obj = {
                titre: titreOeuvre.innerText,
                titre2: titreAlter.innerText,
                cover: img?.getAttribute("src"),
                synopsis: alldata[1],
                genres: alldata[2],
                avancement: alldata[3],
                correspondance: alldata[4],
                saison: sai
            };
            resolve(obj)
        }).catch(err => {
            reject(err);
        })
    })
};
exports.info = info;

const play = (name, saison, lang, isAnime, ip) => {
    return new Promise(async (resolve, reject) => {
        // if (!isAnime) return resolve(true);
        const
            url = `/catalogue/${name}/${saison}/${lang}`;
        getData(`${baseDomain}${url}`, ip).then(data => {
            const
                dom = parse(data),
                scripts = dom.getElementsByTagName("script"),
                img = dom.querySelector("#imgOeuvre")?.getAttribute("src"),
                name = dom.querySelector("#titreOeuvre")?.innerText;

            let msg, special, jsFetch = [];
            scripts.forEach(e => {
                if (e.innerHTML.includes("#messagePage")) msg = e.innerHTML;
                if (e.innerHTML.includes("creerListe")) special = e.innerHTML;

                const src = e.getAttribute("src");
                if (src) {
                    if (
                        src.startsWith("episodes.js?filever=")
                        // || src.startsWith("../../../../js/contenu/script_videos.js?filever=")
                    ) jsFetch.push(src);
                }
            });
            if (msg) {
                msg = msg.trim().split("\n")[7];
                const match = msg.match(/html\("(.*)"\)/);
                if (match) {
                    const htmlParams = match[1];
                    msg = htmlParams
                } else msg = "";
            } else msg = "";
            if (special) special = special.trim().split("*/")[1].replaceAll("});", "").trim().split("\n").map(e => e.trim()).join("\n");
            else special = "";
            getData(`${baseDomain}${url}/${jsFetch[0]}`, ip).then(data2 => {
                const
                    rdata = data2.split("\n");
                rdata.forEach(e => {
                    e = e.trim();
                    if (e.startsWith("var eps")) {
                        const number = e.split("var eps")[1].split("=")[0].trim();
                        data2 = data2.replace(`var eps${number}=`, `var eps${number} =`).replace(`var eps${number}  =`, `var eps${number} =`);
                        if (number == "AS") data2 = data2.replace(`var eps${number}`, `var eps${number.replaceAll("AS", "111111111111111111")}`)
                    }
                });
                data2 = data2.trim().replaceAll("\n\n", "");

                const get = (regex) => {
                    const
                        result = [];
                    let match;
                    while (match = regex.exec(data2)) {
                        let r = [], a = match[2].split("\n");
                        a.forEach(e => {
                            e = e.trim()
                            if (!e.startsWith("//") && e != "[") r.push(e.replaceAll(",", "").replaceAll("[", "").replaceAll("]", "").replaceAll("'", ""))
                        });
                        if (r?.length != 0) result.push({ number: match[1], lecteur: eval(r.filter(e => e.trim() != "")) })
                    };
                    return result
                };
                const
                    result = get(/var\seps(\d+)\s=\s(\[[\s\S]*?\])/g),
                    obj = {
                        special: special,
                        msg: msg,
                        img: img,
                        name: name,
                        vf: true,
                        js: result,
                        jss: data2
                    },
                    objvf = { ...obj, vf: true },
                    objnovf = { ...obj, vf: false };
                if (!isAnime) resolve(objvf);
                else {
                    if (lang == "vostfr") {
                        getData(`${baseDomain}${url.replace("/vostfr", "/vf")}`, ip).then(data3 => {
                            const
                                dom = parse(data3),
                                isError = dom.querySelector(".w3-display-middle");
                            if (isError) resolve(objnovf);
                            else resolve(objvf)
                        }).catch(err => resolve(objnovf));
                    } else if (lang == "vf") {
                        resolve(objvf)

                        // getData(`${baseDomain}${url.replace("/vf", "/vostfr")}`, ip).then(data3 => {
                        //     const
                        //         dom = parse(data3),
                        //         isError = dom.querySelector(".w3-display-middle");
                        //     if (isError) resolve({ vostfr: false, js: result });
                        //     else resolve({ vostfr: true, js: result })
                        // }).catch(err => resolve({  name: name,vostfr: false, js: result })); 
                    }

                };
            }).catch(err => {
                reject(err);
            })
        }).catch(err => {
            reject(err);
        })
    })
};
exports.play = play