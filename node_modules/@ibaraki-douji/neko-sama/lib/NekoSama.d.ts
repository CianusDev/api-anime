declare class Anime {
    #private;
    readonly names: {
        english: string;
        french: string;
        romanji: string;
        other: string;
        normal: string;
    };
    readonly genres: string[];
    readonly type: "TV" | "FILM" | "OAV" | "SPECIAL";
    readonly cover: string;
    readonly url: string;
    readonly episodesCount: number;
    readonly score: number;
    readonly releaseYear: number;
    readonly status: string;
    get background(): string;
    get episodes(): Episode[];
    constructor(data: any);
    get preferedName(): string;
    fetchAllInformations(): Promise<void>;
}
declare class Episode {
    #private;
    readonly anime: Anime;
    readonly episodeCount: number;
    readonly time: number;
    readonly url: string;
    readonly cover: string;
    get stream(): StreamData;
    constructor(anime: Anime, data: any);
    fetchStreamData(): Promise<void>;
}
declare class StreamData {
    #private;
    readonly url: string;
    readonly episode: Episode;
    get subtitles(): string;
    get streams(): {
        size: {
            height: number;
            width: number;
        };
        data: string;
    }[];
    constructor(episode: Episode, url: string);
    waitLoaded(): Promise<void>;
}
declare class NekoSama {
    private DATAS;
    constructor();
    onReady(): Promise<void>;
    get ready(): boolean;
    search(query: string, type?: "VF" | "VOSTFR"): Promise<Array<Anime>>;
    getAnimeByURL(url: string): Anime;
    download(stream: StreamData, qual: 1080 | 720 | 480, path: string, process?: (data: {
        duration: string;
        current: string;
        speed: number;
        size: string;
        raw: string;
    }) => any): Promise<void>;
}
declare const _default: NekoSama;
export = _default;
